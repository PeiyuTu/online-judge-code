#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
int sum=0;
int par[1020];
void init(int x){
	for(int i=0;i<=x;i++){
		par[i]=i;
	}
}
int find(int x){
	if(x==par[x])return x;
	return par[x]=find(par[x]);
}
void union_(int x,int y){
	par[find(x)]=find(y);
}
struct edge{
	int u,v,cost;
};
bool cmp(edge a,edge b){
	return a.cost<b.cost;
}
vector<edge>g;
int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	int k,r;
	cin>>k>>r;
	init(k);
	//存圖 
	for(int i=0;i<r;i++){
		int a,b,w;
		cin>>a>>b>>w;
		g.push_back({a,b,w});
	}
	//cost排序 
	sort(g.begin(),g.begin()+r,cmp);
	//connect u v
	for(int i=0;i<r;i++)
		if(find(g[i].u)!=find(g[i].v)){
	 	    union_(g[i].u,g[i].v);
			sum+=g[i].cost;	
		}
	int tmp=par[0];
	for(int i=0;i<k;i++)
		if(find(i)!=tmp)sum=-1;
	cout<<sum<<'\n';
	return 0;
}
